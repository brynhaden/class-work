#Importing GPS Data from GitHub
import pandas as pd
import os

# Ensure the required dependency is installed
try:
    import openpyxl
except ImportError:
    import subprocess
    subprocess.check_call(['pip', 'install', 'openpyxl'])

# Pull the latest changes from GitHub
os.system('git pull')

# Function to load Readiness csvs and add 'Date' column from filename since there is no date column 
def load_csv_with_date(filename):
    # Extract date from filename
    date_str = filename.split('_')[-1].split('.')[0]
    
    # Load CSV file
    df = pd.read_csv(filename)
    
    # Add 'Date' column
    df['Date'] = date_str
    
    return df

# List of filenames
filenames = [
    '/work/UNCWSoccer/uncwomensoccer-overview_2025-02-03.csv',
    '/work/UNCWSoccer/uncwomensoccer-overview_2025-02-05.csv',
    '/work/UNCWSoccer/uncwomensoccer-overview_2025-02-07.csv',
    # Add more filenames as time goes on. Just go hover over the name on the left and click copy path to clipboard an then copy that in
]

# Load and concatenate all CSV files
dfs = [load_csv_with_date(filename) for filename in filenames]
merged_readiness = pd.concat(dfs, ignore_index=True)

# Display the merged dataframe
print(merged_readiness.head(30))

#Importing RPE Data from Google Sheets
import pandas as pd
import re

# This function will convert the url to a download link
def convert_gsheets_url(u):
    try:
        worksheet_id = u.split("#gid=")[1]
    except IndexError:
        # Couldn't get worksheet id. Ignore it
        worksheet_id = None
    u = re.findall("https://docs.google.com/spreadsheets/d/.*?/", u)[0]
    u += "export"
    u += "?format=csv"
    if worksheet_id:
        u += "&gid={}".format(worksheet_id)
    return u

sample_url = "https://docs.google.com/spreadsheets/d/1dD8voDYfQCV-uH_VBJX5VJXI3Bcte2JIqPlFojffmwo/edit?gid=0#gid=0"

try:
    url = convert_gsheets_url(sample_url)
    df = pd.read_csv(url)
    print("Read successfully")
except Exception as e:
    print(f"Could not read any data from the URL you provided. Error: {e}")
    url = convert_gsheets_url(sample_url)
    df = pd.read_csv(url)

#Importing Readiness Data From GitHub
import pandas as pd

# Function to load CSV and handle errors
def load_csv(filename):
    try:
        return pd.read_csv(filename, on_bad_lines='skip')
    except pd.errors.ParserError as e:
        print(f"Error parsing {filename}: {e}")
        return pd.DataFrame()  # Return an empty DataFrame if there's an error

# List of filenames
filenames = [
    '/work/UNCWSoccer/training_session_885fcd35-9ec3-4e33-ba69-114e5b9d785c.csv',
    '/work/UNCWSoccer/training_session_302581d4-885e-492e-a38c-d4efbbd9719f (1).csv',
    '/work/UNCWSoccer/training_session_bf4fa14f-2b4e-426a-bf04-54a0baecf82a.csv',
    # Add more player_data csvs as needed
]

# Load and concatenate all CSV files
dfs = [load_csv(filename) for filename in filenames]
merged_playerdata = pd.concat(dfs, ignore_index=True)

# Display the merged dataframe
print(merged_playerdata.head(30))

#Preparing the Data
# Correcting specific names in the 'Athlete' column 
name_corrections = {
    'Aven Elizabeth Alvarez': 'Aven Alvarez', 
    'Linda ullmark': 'Linda Ullmark', 
    'hannah carlotta johann': 'Hannah Johann',
    'hannah johann' : 'Hannah Johann',
    'Jennifer Mary Dearie': 'Jenny Dearie',
    'Jennifer Dearie': 'Jenny Dearie',
    'Dearie Jennifer': 'Dearie Jenny',
    'abby gundry' : 'Abby Gundry'
}

# Apply name corrections to the 'Athlete' column 
if 'Athlete' in merged_playerdata.columns:
    merged_playerdata['Athlete'] = merged_playerdata['Athlete'].replace(name_corrections)

# Change 'First' from 'Jennifer' to 'Jenny'
merged_readiness['First'] = merged_readiness['First'].replace({'Jennifer': 'Jenny'})

# Split 'Athlete' column into 'First' and 'Last' 
if 'Athlete' in merged_playerdata.columns:
    merged_playerdata[['First', 'Last']] = merged_playerdata['Athlete'].str.split(' ', n=1, expand=True)

# Convert StartTime to Date format in merged_playerdata
merged_playerdata['Date'] = pd.to_datetime(merged_playerdata['Start Time'], format='%d/%m/%Y %H:%M').dt.date

# Convert Date to datetime format in merged_readiness
merged_readiness['Date'] = pd.to_datetime(merged_readiness['Date']).dt.date

# Merge the dataframes on columns
merged_data = pd.merge(merged_playerdata, merged_readiness, on=['Date', 'First', 'Last'])

# Display the merged dataframe to verify the merge
print(merged_data)
# Create a dictionary to map player names to numbers
player_mapping = {
    ('Abby', 'Gundry'): 1,
    ('Jenny', 'Dearie'): 9,
    ('Ashley', 'Pennie'): 10,
    ('Hannah', 'Johann'): 1,
    ('Linda', 'Ullmark'): 10,
    ('Aven', 'Alvarez'): 2,
    ('Bella', 'Devey'): 10,
    ('Bella', 'Gaetino'): 10,
    ('Caitlin' , 'Mara'): 4,
    ('Eden','Bretzer'): 4,
    ('Ella', 'Smith'): 9,
    ('Marisa', 'Shorrock'): 1,
    ('Olivia' , 'Thomas'): 9,
    ('Raegan' , 'Williams'): 3,
    ('Tessa' , 'Dellarose'): 6,
    ('Evelyn' , 'Shores'): 6,
    ('Hope' , 'Munson'): 3,
    ('Kate' , 'Faasse'): 9,
    ('Liya' , 'Brooks'): 1,
    ('Logan' , 'Tongberg'): 9,
}

# Create the 'Positions2' column based on the mapping
merged_data['Positions2'] = merged_data.apply(lambda row: player_mapping.get((row['First'], row['Last']), None), axis=1)

# Display the dataframe to verify the new column
print(merged_data)
# Dictionary to store unique IDs
player_id_mapping = {
    ('Abby', 'Gundry'): _,
    ('Jenny', 'Dearie'): _,
    ('Ashley', 'Pennie'): _,
    ('Hannah', 'Johann'): _,
    ('Linda', 'Ullmark'): _,
    ('Aven', 'Alvarez'): _,
    ('Bella', 'Devey'): _,
    ('Bella', 'Gaetino'): _,
    ('Caitlin' , 'Mara'): _,
    ('Eden','Bretzer'): _,
    ('Ella', 'Smith'): _,
    ('Marisa' ,'Shorrock'): _,
    ('Olivia' , 'Thomas'): _,
    ('Raegan' , 'Williams'): _,
    ('Tessa' , 'Dellarose'): _,
    ('Evelyn' , 'Shores'): _,
    ('Hope' , 'Munson'): _,
    ('Kate' , 'Faasse'): _,
    ('Liya' , 'Brooks'): _,
    ('Logan' , 'Tongberg'): _,

}

# Create the 'PlayerID' column based on the mapping
merged_data['PlayerID'] = merged_data.apply(lambda row: player_id_mapping.get((row['First'], row['Last']), None), axis=1)

# Display the dataframe to verify the new column
print(merged_data)

#Create An Interactive Table With A Date Drop-Down Menu
import pandas as pd

# Create DataFrame
df = merged_data

# Convert date column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Generate the HTML and JavaScript code for the dropdown menu and table
date_options = df['Date'].dt.strftime('%Y-%m-%d').unique()
date_options_html = ''.join([f'<option value="{date}">{date}</option>' for date in date_options])

html_code = f'''
<!DOCTYPE html>
<html>
<head>
    <title>Player Performance Data</title>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>
</head>
<body>
    <h3>Select Date:</h3>
    <select id='date-select'>
        {date_options_html}
    </select>
    <div id='table-container'></div>
    <script>
        var data = {df.to_json(orient='records')};

        function createTable(selectedDate) {{
            var filteredData = data.filter(row => new Date(row.Date) <= new Date(selectedDate));
            var columns = ['PlayerID','Positions2','Distance (m)', 'Sprint Events', 'High Intensity Events',
       'Max Speed (km/h)', 'Average Speed (km/h)',
       'Sprint Distance (m) (Speed Zone 6)',
       'High intensity Running Distance (m) (Speed Zone 5)',
       'Meters / Minutes', 'Acceleration Events', 'Deceleration Events',
       'Stationary / Walk (%)', 'Jogging', 'Low Int Run', 'Med Int Run',
       'High Int Run', 'Sprint', 'Ignore For Averages',
       'Distance Profile M at 1 Kph', 'Distance Profile M at 2 Kph',
       'Distance Profile M at 3 Kph', 'Distance Profile M at 4 Kph',
       'Distance Profile M at 5 Kph', 'Distance Profile M at 6 Kph',
       'Distance Profile M at 7 Kph', 'Distance Profile M at 8 Kph',
       'Distance Profile M at 9 Kph', 'Distance Profile M at 10 Kph',
       'Distance Profile M at 11 Kph', 'Distance Profile M at 12 Kph',
       'Distance Profile M at 13 Kph', 'Distance Profile M at 14 Kph',
       'Distance Profile M at 15 Kph', 'Distance Profile M at 16 Kph',
       'Distance Profile M at 17 Kph', 'Distance Profile M at 18 Kph',
       'Distance Profile M at 19 Kph', 'Distance Profile M at 20 Kph',
       'Distance Profile M at 21 Kph', 'Distance Profile M at 22 Kph',
       'Distance Profile M at 23 Kph', 'Distance Profile M at 24 Kph',
       'Distance Profile M at 25 Kph', 'Distance Profile M at 26 Kph',
       'Distance Profile M at 27 Kph', 'Distance Profile M at 28 Kph',
       'Distance Profile M at 29 Kph', 'Distance Profile M at 30 Kph',
       'Distance Profile M at 31 Kph', 'Distance Profile M at 32 Kph',
       'Distance Profile M at 33 Kph', 'Distance Profile M at 34 Kph',
       'Distance Profile M at 35 Kph', 'Distance Profile M at 36 Kph',
       'Distance Profile M at 37 Kph', 'Distance Profile M at 38 Kph',
       'Distance Profile M at 39 Kph', 'Distance Profile M at 40 Kph',
       'Session Type', 'Date', 'Readiness Score', 'Readiness Change', 'Sleep',
       'Soreness', 'Load', 'Prev Load', 'Hydration'];
            var tableHtml = '<table border="1"><tr>';
            columns.forEach(col => {{
                tableHtml += '<th>' + col + '</th>';
            }});
            tableHtml += '</tr>';
            filteredData.forEach(row => {{
                tableHtml += '<tr>';
                columns.forEach(col => {{
                    tableHtml += '<td>' + row[col] + '</td>';
                }});
                tableHtml += '</tr>';
            }});
            tableHtml += '</table>';
            document.getElementById('table-container').innerHTML = tableHtml;
        }}

        $(document).ready(function() {{
            $('#date-select').change(function() {{
                var selectedDate = $(this).val();
                createTable(selectedDate);
            }});

            // Initialize the table with the first date
            createTable('{date_options[0]}');
        }});
    </script>
</body>
</html>
'''

# Save the HTML code to a file
with open('table_with_dropdown.html', 'w') as file:
    file.write(html_code)

print("HTML file has been created: table_with_dropdown.html")

#Create an Interactive Pivot Table
import pandas as pd
from pivottablejs import pivot_ui

# Create an interactive pivot table for the merged_data dataframe
pivot_ui(merged_data)

#Create A Table Demonstrating the Acute/Chronic Workload Ratio
import pandas as pd
from datetime import datetime, timedelta
from tabulate import tabulate

df= merged_data

# Convert date column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Today's date
today = datetime.now()

# Calculate acute load (last 7 days) and chronic load (last 28 days)
df['acute_load'] = df.apply(lambda row: df[(df['PlayerID'] == row['PlayerID']) & (df['Date'] <= row['Date']) & (df['Date'] > row['Date'] - timedelta(days=7))]['Load'].sum(), axis=1)
df['chronic_load'] = df.apply(lambda row: df[(df['PlayerID'] == row['PlayerID']) & (df['Date'] <= row['Date']) & (df['Date'] > row['Date'] - timedelta(days=28))]['Load'].sum(), axis=1)

# Calculate acute/chronic ratio
df['acute_chronic_ratio'] = df['acute_load'] / df['chronic_load']

# Select relevant columns
ACWR_df = df[['PlayerID','acute_load', 'chronic_load', 'acute_chronic_ratio']]

columns_to_use2 = ['PlayerID','acute_load', 'chronic_load', 'acute_chronic_ratio']

# Create a new DataFrame with only the specified columns
df_selected_columns2 = df[columns_to_use2]

# Convert the DataFrame to a table
ACWR_df = tabulate(df_selected_columns2, headers='keys', tablefmt='fancy_grid')

print(ACWR_df)
